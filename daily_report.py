import datetime
import os
import requests
from typing import Dict, Any

TELEGRAM_BOT_TOKEN = os.environ["BOT_TOKEN"]
TELEGRAM_CHAT_ID = os.environ["CHAT_ID"]

def fetch_weather_moscow() -> str:
    # –ú–æ—Å–∫–≤–∞: 55.7558, 37.6176
    url = (
        "https://api.open-meteo.com/v1/forecast"
        "?latitude=55.7558&longitude=37.6176"
        "&hourly=temperature_2m,precipitation_probability,weathercode"
        "&daily=temperature_2m_max,temperature_2m_min,precipitation_sum,weathercode"
        "&timezone=Europe%2FMoscow"
    )
    r = requests.get(url, timeout=20)
    r.raise_for_status()
    data = r.json()
    today = data["daily"]
    t_min = today["temperature_2m_min"][0]
    t_max = today["temperature_2m_max"][0]
    precip = today.get("precipitation_sum", [0])[0]
    code = today["weathercode"][0]
    desc = weathercode_to_text(code)
    return f"–ü–æ–≥–æ–¥–∞ (–ú–æ—Å–∫–≤–∞): {desc}, –º–∏–Ω {t_min:.0f}¬∞C, –º–∞–∫—Å {t_max:.0f}¬∞C, –æ—Å–∞–¥–∫–∏ {precip:.1f} –º–º"

def weathercode_to_text(code: int) -> str:
    mapping = {
        0: "—è—Å–Ω–æ",
        1: "–≤ –æ—Å–Ω. —è—Å–Ω–æ",
        2: "–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å",
        3: "–æ–±–ª–∞—á–Ω–æ",
        45: "—Ç—É–º–∞–Ω",
        48: "–∏–∑–º–æ—Ä–æ–∑—å",
        51: "–ª–µ–≥–∫–∞—è –º–æ—Ä–æ—Å—å",
        53: "–º–æ—Ä–æ—Å—å",
        55: "—Å–∏–ª—å–Ω–∞—è –º–æ—Ä–æ—Å—å",
        61: "–ª–µ–≥–∫–∏–π –¥–æ–∂–¥—å",
        63: "–¥–æ–∂–¥—å",
        65: "–ª–∏–≤–µ–Ω—å",
        66: "–ª–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å",
        67: "—Å–∏–ª—å–Ω—ã–π –ª–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å",
        71: "–ª–µ–≥–∫–∏–π —Å–Ω–µ–≥",
        73: "—Å–Ω–µ–≥",
        75: "—Å–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥",
        80: "–∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–æ–∂–¥–∏",
        81: "—Å–∏–ª—å–Ω—ã–µ –∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–æ–∂–¥–∏",
        82: "–æ—á. —Å–∏–ª—å–Ω—ã–µ –∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–æ–∂–¥–∏",
        85: "—Å–Ω–µ–≥–æ–ø–∞–¥",
        86: "—Å–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥–æ–ø–∞–¥",
        95: "–≥—Ä–æ–∑–∞",
        96: "–≥—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º",
        99: "—Å–∏–ª—å–Ω–∞—è –≥—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º",
    }
    return mapping.get(code, f"–∫–æ–¥ {code}")

def fetch_fx() -> str:
    # –¶–ë –†–§: –∫—É—Ä—Å—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è/–ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å
    r = requests.get("https://www.cbr-xml-daily.ru/daily_json.js", timeout=20)
    r.raise_for_status()
    data = r.json()["Valute"]
    usd = data["USD"]["Value"]
    eur = data["EUR"]["Value"]
    return f"–ö—É—Ä—Å—ã –¶–ë: USD {usd:.2f} ‚ÇΩ, EUR {eur:.2f} ‚ÇΩ"

def fetch_crypto() -> str:
    # CoinGecko simple price (USD)
    ids = "bitcoin,ethereum,solana"
    url = f"https://api.coingecko.com/api/v3/simple/price?ids={ids}&vs_currencies=usd"
    r = requests.get(url, timeout=20, headers={"Accept": "application/json"})
    r.raise_for_status()
    d: Dict[str, Any] = r.json()
    btc = d["bitcoin"]["usd"]
    eth = d["ethereum"]["usd"]
    sol = d["solana"]["usd"]
    # format with thousands separators and no decimals; replace comma with thin space for readability
    btc_str = f"${btc:,.0f}".replace(",", " ")
    eth_str = f"${eth:,.0f}".replace(",", " ")
    sol_str = f"${sol:,.0f}".replace(",", " ")
    return f"‚Çø –ö—Ä–∏–ø—Ç–æ (USD): BTC {btc_str}, ETH {eth_str}, SOL {sol_str}"

def send_telegram_message(text: str) -> None:
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {"chat_id": TELEGRAM_CHAT_ID, "text": text, "parse_mode": "HTML", "disable_web_page_preview": True}
    r = requests.post(url, json=payload, timeout=20)
    r.raise_for_status()

def build_message() -> str:
    today = datetime.datetime.now(datetime.timezone(datetime.timedelta(hours=3)))  # MSK
    date_str = today.strftime("%d.%m.%Y")
    parts = [
        f"üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –°–≤–æ–¥–∫–∞ –Ω–∞ {date_str}",
        "",
        f"‚òÄÔ∏è {fetch_weather_moscow()}",
        f"üí± {fetch_fx()}",
        f"üíπ {fetch_crypto()}",
    ]
    return "\n".join(parts)

def main() -> None:
    try:
        msg = build_message()
        send_telegram_message(msg)
    except Exception as e:
        try:
            send_telegram_message(f"–û—à–∏–±–∫–∞ —É—Ç—Ä–µ–Ω–Ω–µ–π —Å–≤–æ–¥–∫–∏: {e}")
        except Exception:
            pass
        raise

if __name__ == "__main__":
    main()
